apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.google.protobuf'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'site.hanschen.runwithyou'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file('../keyStore/release.keystore')
            storePassword getProperty('store.password', 'STORE_PASSWORD')
            keyAlias getProperty('store.key.alias', 'KEY_ALIAS')
            keyPassword getProperty('store.key.password', 'KEY_PASSWORD')
        }

        debug {
            storeFile file('../keyStore/debug.keystore')
            storePassword 'android'
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            buildConfigField 'boolean', 'LOG_ENABLE', 'false'
            signingConfig signingConfigs.release
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [AMAP_KEY: getProperty('amap.key', 'AMAP_KEY')]
        }

        debug {
            buildConfigField 'boolean', 'LOG_ENABLE', 'true'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [AMAP_KEY: getProperty('amap.key', 'AMAP_KEY')]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            def releaseApkName = String.format('%s_%s_%s_%s.apk', 'Runner', getVersionName(), getDate(), variant.buildType.name);
            output.outputFile = new File(oldFile.parent, releaseApkName)
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }
}

def getDate() {
    return new Date().format('yyyyMMdd', TimeZone.getTimeZone('GMT+8'))
}

def getVersionName() {
    return 'v' + android.defaultConfig.versionName
}

def getProperty(String propertyName, String envName) {
    try {
        def property = project.hasProperty(propertyName) ? project.property(propertyName) : System.getenv(envName)
        if (property == null) {
            throw new NullPointerException();
        }
        return property
    } catch (Throwable ignored) {
        def message = String.format('********************************************************************************\n' +
                'You need define %s in gradle.properties or set environment variable: %s\n' +
                '********************************************************************************\n', propertyName, envName)
        throw new RuntimeException(message)
    }
}

greendao {
    schemaVersion 1
    daoPackage 'site.hanschen.runwithyou.database.gen'
    targetGenDir 'src/main/java'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.2.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.dependencies.common

    // android library
    compile rootProject.ext.dependencies.supportV13
    compile rootProject.ext.dependencies.supportDesign
    compile rootProject.ext.dependencies.recyclerview
    compile rootProject.ext.dependencies.multidex

    // third part library
    compile rootProject.ext.dependencies.materialDialog
    compile rootProject.ext.dependencies.bottomBar

    // leakCanary
    debugCompile rootProject.ext.dependencies.leakCanaryDebug
    releaseCompile rootProject.ext.dependencies.leakCanaryRelease
    testCompile rootProject.ext.dependencies.leakCanaryTest

    // dagger
    compile rootProject.ext.dependencies.dagger
    annotationProcessor rootProject.ext.dependencies.daggerAnnotationProcessor

    // butter knife
    compile rootProject.ext.dependencies.butterKnife
    annotationProcessor rootProject.ext.dependencies.butterKnifeProcessor

    // ReactiveX
    compile rootProject.ext.dependencies.rxJava2
    compile rootProject.ext.dependencies.rxAndroid2
    compile rootProject.ext.dependencies.rxPermissions

    // greenDAO
    compile rootProject.ext.dependencies.greenDAO

    // AVLoadingIndicatorView, see: https://github.com/81813780/AVLoadingIndicatorView
    compile 'com.wang.avi:library:2.1.3'

    // MaterialAbout, see: https://github.com/jrvansuita/MaterialAbout
    compile 'com.github.jrvansuita:MaterialAbout:0.1.2'

    // MaterialEditText, see: https://github.com/rengwuxian/MaterialEditText
    compile 'com.rengwuxian.materialedittext:library:2.1.4'

    // You need to build grpc-java to obtain these libraries below.
    compile 'io.grpc:grpc-okhttp:1.2.0'
    compile 'io.grpc:grpc-protobuf-lite:1.2.0'
    compile 'io.grpc:grpc-stub:1.2.0'

    // test framework
    testCompile rootProject.ext.dependencies.junit
    androidTestCompile(rootProject.ext.dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
}
