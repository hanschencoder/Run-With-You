apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "site.hanschen.runwithyou"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("release.keystore")
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            } catch (ignored) {
                println '********************************************************************************\n' +
                        'You can define STORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD in gradle.properties.\n' +
                        '********************************************************************************\n'
                if (System.console() != null) {
                    storePassword new String(System.console().readPassword("\n\$ Enter storePassword: "))
                    keyAlias new String(System.console().readLine("\n\$ Enter keyAlias: "))
                    keyPassword new String(System.console().readPassword("\n\$ Enter keyPassword: "))
                }
            }
        }

        debug {
            // No debug config
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "LOG_ENABLE", "false"
            signingConfig signingConfigs.release
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [AMAP_KEY: project.hasProperty('amap.release.key') ? project.property('amap.release.key') : System.getenv('AMAP_RELEASE_KEY')]
        }

        debug {
            buildConfigField "boolean", "LOG_ENABLE", "true"
            signingConfig signingConfigs.debug
            manifestPlaceholders = [AMAP_KEY: project.hasProperty('amap.debug.key') ? project.property('amap.debug.key') : System.getenv('AMAP_DEBUG_KEY')]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            def releaseApkName = String.format("%s_%s_%s_%s.apk", "Runner", getVersionName(), getDate(), variant.buildType.name);
            output.outputFile = new File(oldFile.parent, releaseApkName)
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }
}

def getDate() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

def getVersionName() {
    return "v" + android.defaultConfig.versionName
}

greendao {
    schemaVersion 1
    daoPackage 'site.hanschen.runwithyou.database.gen'
    targetGenDir 'src/main/java'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.dependencies.common

    // android library
    compile rootProject.ext.dependencies.supportV13
    compile rootProject.ext.dependencies.supportDesign
    compile rootProject.ext.dependencies.recyclerview
    compile rootProject.ext.dependencies.multidex

    // third part library
    compile rootProject.ext.dependencies.materialDialog
    compile rootProject.ext.dependencies.bottomBar

    // leakCanary
    debugCompile rootProject.ext.dependencies.leakCanaryDebug
    releaseCompile rootProject.ext.dependencies.leakCanaryRelease
    testCompile rootProject.ext.dependencies.leakCanaryTest

    // dagger
    compile rootProject.ext.dependencies.dagger
    annotationProcessor rootProject.ext.dependencies.daggerAnnotationProcessor

    // butter knife
    compile rootProject.ext.dependencies.butterKnife
    annotationProcessor rootProject.ext.dependencies.butterKnifeProcessor

    // ReactiveX
    compile rootProject.ext.dependencies.rxJava2
    compile rootProject.ext.dependencies.rxAndroid2
    compile rootProject.ext.dependencies.rxPermissions

    // greenDAO
    compile rootProject.ext.dependencies.greenDAO

    // AVLoadingIndicatorView, see: https://github.com/81813780/AVLoadingIndicatorView
    compile 'com.wang.avi:library:2.1.3'

    // test framework
    testCompile rootProject.ext.dependencies.junit
    androidTestCompile(rootProject.ext.dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
